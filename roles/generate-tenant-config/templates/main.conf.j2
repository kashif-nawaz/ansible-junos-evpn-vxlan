/* This block of configuration has been generated by the role generate-tenant-config for Ansible*/
{% if 'leaf' in group_names %}
protocols {
    evpn {
        encapsulation vxlan;
        extended-vni-list [{% for ten in INFRA_NW %}  {{ ten.vni }} {% endfor %}];
        multicast-mode ingress-replication;
        default-gateway do-not-advertise;
        vni-options {
{% for ten in INFRA_NW %}
            vni {{ten.vni }} {
                vrf-target  {{ten.rt}};
            }
{% endfor %}
        }
    }
}
switch-options {
      vtep-source-interface lo0.0;
      route-distinguisher {{underlay.loopback_ip}}:{{id}};
      vrf-import pl-leaf-in;
      vrf-target target:9999:9999;
  }


{% for ten in INFRA_NW %}
{% if ten.L3_if is defined %}
interfaces {
{# Configuration for Anycast Gateway #}
    replace: 
    irb {
        unit {{ ten.vni }} {
            description " {{ten.vlan_name}} "
            family inet {
                address {{ ten.L3_if.anycast_gw}};
                }
            mac 00:00:44:00:55:10;
            }

   }
}

{% if ten.vrf is defined %}
{# Configure L3 VRF per tenant #}
routing-instances {
    vrf_{{ten.vlan_name}} {
        instance-type vrf;
        interface irb.{{ ten.vni }};
        route-distinguisher {{ overlay.loopback_ip }}:{{ten.vni}};
        vrf-table-label;
        vrf-target target:{{overlay_as}}:{{ten.vni}};
        protocols {
        evpn {
            ip-prefix-routes {
                advertise direct-nexthop;
                encapsulation vxlan;
                vni {{ten.vni+ten.vni}};
            }
        }
    }
  }
}
{% endif %}

{% endif %}
{% endfor %}
replace:
vlans {
{% for ten in INFRA_NW %}
      {{ten.vlan_name}} {
        vlan-id {{ ten.vni }};
{% if ten.L3_if is defined %}
        l3-interface irb.{{ ten.vni }};
{% endif %}
        vxlan {
            vni {{ ten.vni }};
            ingress-node-replication;
        }
    }
{% endfor %}
}


policy-options {
     policy-statement pl-leaf-in {
        term sw-comm {
            from community CM-LEAF-ESI;
            then accept;
        }
{% for VN in INFRA_NW %}
        term import_vni_{{ VN.vni }} {
            from community {{ VN.rt }};
            then accept;
        }

{% endfor %}
        term default {
            then reject;
        }
    }
    community CM-LEAF-ESI members target:9999:9999;
{% for RT in INFRA_NW %}
    community {{RT.rt}} members {{RT.rt }};

{% endfor %}
}



{% elif 'spine' in group_names %}


routing-instances {
{% for ten in INFRA_NW %}
{% if ten.L3_if is defined and ten.vrf is defined %}
   {{ten.vrf}} {
        instance-type vrf;
        interface irb.{{ten.vni}};
{% if ten.NORTH_IF is defined %}
        interface {{ten.NORTH_IF.PHY_IF}}.{{ten.NORTH_IF.VLAN}};
{% endif %}
        route-distinguisher {{underlay.loopback_ip}}:{{ten.vni}};
        vrf-import vrf_{{ten.vlan_name}}_import;
        vrf-export vrf_{{ten.vlan_name}}_export;
        vrf-table-label;
        routing-options {
             auto-export;
        }
        protocols {
{% if ten.NORTH_IF is defined %}
        bgp {
        group to-nc21 {
            export vrf_{{ten.vlan_name}}_nc21_export;
            remove-private;
            peer-as {{ten.NORTH_IF.PEER_AS}};
            local-as {{ten.NORTH_IF.LoCAL_AS}};
            local-as loops 2;
            neighbor {{ten.NORTH_IF.NBR}};
            }
        }
{% endif %}
        evpn {
            ip-prefix-routes {
                advertise direct-nexthop;
                encapsulation vxlan;
                vni {{ten.vni+ten.vni}};
            }
        }
    }
  }
{% endif %}
{% endfor %}
}


interfaces {
{% for ten in INFRA_NW %}

{% if ten.NORTH_IF is defined %}
  {{ten.NORTH_IF.PHY_IF}} {
      description "{{ten.NORTH_IF.PHY_IF}}_nc_21";
      vlan-tagging;
      unit {{ten.NORTH_IF.VLAN}} {
           description "{{ten.vrf}}_nc_21";
          vlan-id {{ten.NORTH_IF.VLAN}};
          family inet {
              address {{ten.NORTH_IF.IP}};
          }
      }
  }
{% endif %}

{% if ten.L3_if is defined %}
    irb {
        mtu 9100;
        replace:
        unit {{ten.vni}} {
            proxy-macip-advertisement;
            virtual-gateway-accept-data;
            family inet {    
                address {{ten.L3_if.IRB_IP}} {
                    virtual-gateway-address {{ten.L3_if.anycast_gw}};
                }
            }
            virtual-gateway-v4-mac 00:a0:a0:a0:00:a0;
        }
    }
{% endif %}
{% endfor %}
}


 protocols {
    evpn {
       vni-options {
{% for ten in INFRA_NW %}
           vni {{ten.vni}} {
               vrf-target {{ten.rt}};
           }
{% endfor %}
      }
       encapsulation vxlan;
       multicast-mode ingress-replication;
       remote-ip-host-routes;
       default-gateway no-gateway-community;
       extended-vni-list [{% for ten in INFRA_NW %} {{ten.vni}} {% endfor %}];
   }
 }
 switch-options {
      vtep-source-interface lo0.0;
      route-distinguisher {{underlay.loopback_ip}}:{{id}};
      vrf-import pl-leaf-in;
      vrf-target target:9999:9999;
  }
 replace:
 vlans {
{% for ten in INFRA_NW %}
       {{ten.vlan_name}} {
            vlan-id {{ten.vni}};
{% if ten.L3_if is defined %}
            l3-interface irb.{{ten.vni}};
{% endif %}
            vxlan {
                vni {{ten.vni}};
               }
           }
{% endfor %}
       }
policy-options {
 policy-statement pl-leaf-in {
       term sw-comm {
            from community CM-LEAF-ESI;
            then accept;
        }
{% for ten in INFRA_NW %}
        term import_vni_{{ ten.vni }} {
            from community {{ten.rt}};
            then accept;
        }
{% endfor %}
        term last-term {
            then reject;
        }
}
}



policy-options {
{% for ten in INFRA_NW %}
{% if ten.NORTH_IF is defined %}

    policy-statement vrf_{{ten.vlan_name}}_nc21_export {
        term 1 {
            from {
               route-filter {{ten.L3_if.IRB_IP | ipaddr('subnet')}} exact;
                }
               then accept;
        }
    }
{% endif %}

{% if ten.vrf is defined and  ten.L3_if is defined %}
    policy-statement vrf_{{ten.vlan_name}}_export {
        term 1 {
            then {
                community add vrf_{{ten.vlan_name}};
                accept;
            }
        }
    }
    policy-statement vrf_{{ten.vlan_name}}_import {
        term 1 {
            from community vrf_{{ten.vlan_name}};
            then accept;
        }
    }

{% if 	ten.LEAK_TO_VRF is defined and ten.LEAK_TO_VRF[0] != None %}
{% for VRF in ten.LEAK_TO_VRF %}
  policy-statement vrf_{{VRF}}_import {
    term vrf_{{ten.vlan_name}}_vrf_{{VRF}} {
       from {
        community vrf_{{ten.vlan_name}};
        route-filter {{ten.L3_if.IRB_IP | ipaddr('subnet')}} longer;
       }
        then accept;
   }
  }
{% endfor %}
{% endif %}

{% endif %}
{% endfor %}

  community CM-LEAF-ESI members target:9999:9999;
{% for ten in INFRA_NW %}
  community {{ten.rt}} members {{ten.rt }};
  community vrf_{{ten.vlan_name}} members target:{{overlay_as}}:{{ten.vni}};
{% endfor %}

}

{% for ten in INFRA_NW %}
{% if ten.NORTH_IF.QOS_REWRITE is defined and ten.NORTH_IF.QOS_REWRITE.CODE_POINT != None %}
class-of-service {
    interfaces {
        {{ten.NORTH_IF.PHY_IF}} {
            unit {{ten.NORTH_IF.VLAN}} {
                rewrite-rules {
                    dscp {{ten.NORTH_IF.QOS_REWRITE.RULE_NAME}};
                }
            }
        }
    }
    rewrite-rules {
        dscp {{ten.NORTH_IF.QOS_REWRITE.RULE_NAME}} {
            forwarding-class best-effort {
                loss-priority low code-point {{ten.NORTH_IF.QOS_REWRITE.CODE_POINT}};
            }
        }
    }
}
{% endif %}
{% endfor %}

{% for ten in INFRA_NW %}
{% if ten.LEAK_TO_VRF is defined and ten.LEAK_TO_VRF[0] != None %}
{% for VRF in ten.LEAK_TO_VRF %}
routing-instances {
    vrf_{{VRF}} {
	routing-options {
	  aggregate {
	      route {{ten.L3_if.IRB_IP | ipaddr('subnet')}};
		   }
	      }
	}
}
{% endfor %}
{% endif %}
{% endfor %}


{% for nw in OVERLAY_NW %}
interfaces {
{% if nw.NORTH_IF is defined %}
  {{nw.NORTH_IF.PHY_IF}} {
      description "{{nw.NORTH_IF.PHY_IF}}_nc_21";
      vlan-tagging;
      unit {{nw.NORTH_IF.VLAN}} {
          description "vrf_{{nw.VRF}}_nc_21";
          vlan-id {{nw.NORTH_IF.VLAN}};
          family inet {
              address {{nw.NORTH_IF.IP}};
          }
      }
  }
{% endif %}
  }
 policy-options {
  policy-statement vrf_{{nw.VRF}}_nc21_export {
    term 1 {
      from {
          route-filter {{nw.subnet}} exact;
      }
      then accept;
  }
  }
  policy-statement vrf_{{nw.VRF}}_export {
    term 1 {
        then {
            community add {{nw.VRF}};
            accept;
        }
    }
 }
  policy-statement vrf_{{nw.VRF}}_import {
    term 1 {
        from community {{nw.VRF}};
        then accept;
    }
  }
  community {{nw.VRF}} members target:{{overlay_as}}:{{nw.RT}};
 }
 routing-instances {
      vrf_{{nw.VRF}} {
        instance-type vrf;
{% if nw.NORTH_IF is defined %}
        interface {{nw.NORTH_IF.PHY_IF}}.{{nw.NORTH_IF.VLAN}};
{% endif %}
        route-distinguisher {{underlay.loopback_ip}}:{{nw.RT}};
        vrf-import vrf_{{nw.VRF}}_import;
        vrf-export vrf_{{nw.VRF}}_export;
        vrf-table-label;
        routing-options {
             auto-export;
        }
        protocols {
{% if nw.NORTH_IF is defined %}
        bgp {
        group to-nc21 {
            export vrf_{{nw.VRF}}_nc21_export;
            remove-private;
            peer-as {{nw.NORTH_IF.PEER_AS}};
            local-as {{nw.NORTH_IF.LoCAL_AS}};
            local-as loops 2;
            neighbor {{nw.NORTH_IF.NBR}};
            }
        }
{% endif %}
    }
  }
 }


{% if nw.NORTH_IF.QOS_REWRITE is defined and nw.NORTH_IF.QOS_REWRITE.CODE_POINT != None %}
class-of-service {
    interfaces {
        {{nw.NORTH_IF.PHY_IF}} {
            unit {{nw.NORTH_IF.VLAN}} {
                rewrite-rules {
                    dscp {{nw.NORTH_IF.QOS_REWRITE.RULE_NAME}};
                }
            }
        }
    }
    rewrite-rules {
        dscp {{nw.NORTH_IF.QOS_REWRITE.RULE_NAME}} {
            forwarding-class best-effort {
                loss-priority low code-point {{nw.NORTH_IF.QOS_REWRITE.CODE_POINT}};
            }
        }
    }
}
{% endif %}

{% if 	nw.LEAK_TO_VRF is defined %}
policy-options {
{% for VR in nw.LEAK_TO_VRF %}
  policy-statement vrf_{{VR}}_import {
    term vrf_{{nw.VRF}}_vrf_{{VR}} {
       from {
        community {{nw.VRF}};
        route-filter {{nw.subnet}} longer;
       }
        then accept;
   }
  }
{% endfor %}
}

{% for VR in nw.LEAK_TO_VRF %}
  routing-instances {
    vrf_{{VR}} {
           routing-options {
	      aggregate {
		route {{nw.subnet}};
			}
		}
	}
   }
 
{% endfor %}
{% endif %}


{% endfor %}



{% endif %}
